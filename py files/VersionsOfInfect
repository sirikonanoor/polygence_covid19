#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun 13 16:43:22 2020

@author: sirikonanoor
"""


# Version 1: Most basic, not vectorized. No immunity
def Infect(people_pos, infected_vector, critical_distance):
    distances = distance.cdist(people_pos, people_pos, 'euclidean')
    new_inf_vector = infected_vector
    
    for r in range(distances.shape[0]): 
        for c in range(distances.shape[1]):
            #if the two points aren't the same AND neither point is immune
            if(r != c):
                if(distances[r][c] < critical_distance and (infected_vector[r] == 1 or
                                                            infected_vector[c] == 1)):
                    new_inf_vector[r] = 1   #infect both
                    new_inf_vector[c] = 1
                    
#Version 2: With immunity, not vectrorized
def Infect(people_pos, infected_vector, critical_distance):
    distances = distance.cdist(people_pos, people_pos, 'euclidean')
    new_inf_vector = infected_vector
    
    for r in range(distances.shape[0]): 
        for c in range(distances.shape[1]):
            #if the two points aren't the same AND neither point is immune
            if(r != c and (infected_vector[r] != 2 and infected_vector[c] != 2)):
                if(distances[r][c] < critical_distance and (infected_vector[r] == 1 or
                                                            infected_vector[c] == 1)):
                    new_inf_vector[r] = 1   #infect both
                    new_inf_vector[c] = 1


def Infect(people_pos, infected_vector, critical_distance):
    distances = distance.cdist(people_pos, people_pos, 'euclidean')
    
    within = distances < critical_distance
    repeated = np.repeat(infected_vector, num_people, axis = 0).reshape(num_people, num_people)
    within_danger = np.any(np.logical_and(within, repeated==1), axis=0)
    final = np.logical_and(within_danger, infected_vector != 2)
    infected_vector[final] = 1
    return (infected_vector)
    